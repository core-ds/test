name: ReleaseTest

on:
  workflow_dispatch:
    inputs:

      # Input для ввода features changes (для CHANGELOG.md)
      features:
        type: text
        description: changelog features
        default: ''

      # Input для ввода bugfixes changes (для CHANGELOG.md)
      bugfixes:
        type: text
        description: changelog bugfixes
        default: ''

      # Input для ввода breaking changes (для CHANGELOG.md)
      breaking-changes:
        type: text
        description: changelog breaking changes
        default: ''

      # Select для выбора версии
      version:
        type: choice
        description: Choose which version to release
        required: true
        options:
          - beta
          - patch
          - minor
          - major

jobs:
  publishV:
    runs-on: ubuntu-latest

    steps:

      # Проверка прав доступа. Только пользователь из white_list может выполнить релизную сборку.
      # Остальные могут только выпустить beta версию пакета.
      - name: Check permissions
        run: |
          white_list=("DavidGuryanov","vahrammer","sashabull66")

          if [[ "${white_list[@]}" =~ "${ACTOR}" ]]
            then echo "Доступ разрешен."
          elif [[ "${SELECTED_VERSION}" == "beta" ]]
            then echo "Доступ разрешен только для публикации beta версии пакета."
          else
              echo "Вы не можете выполнить выпуск $SELECTED_VERSION версии пакета. Доступ запрещен!"
              exit 1
          fi
        env:
          SELECTED_VERSION: ${{ github.event.inputs.version }}
          ACTOR: ${{ github.actor }}

      # Переключение на выбранную при запуске action ветку и скачивание файлов в окружение.
      - name: Checkout
        uses: actions/checkout@v3

      # Установка учётных данных bot как gitUser в текущем окружении (для release commit).
      # Извлечение имени текущей ветки.
      # Извлечение sha последнего commit из выбранной ветки (нужно для построения версии beta).
      - name: Git config
        run: |
          git config user.name ${{ secrets.BOT_USERNAME }}
          git config user.email ${{ secrets.BOT_EMAIL }}
          npm config set "@$REPOSITORY:registry" https://registry.npmjs.org
          npm config set //registry.npmjs.org/:_authToken $TOKEN
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          npm config get //registry.npmjs.org/:_authToken
        id: branch
        env:
          TOKEN: ${{ secrets.NPM_TOKEN }}
          REPOSITORY: ${{ github.repository }}
