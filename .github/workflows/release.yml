name: Release

on:
  workflow_dispatch:
    inputs:

      # Input для ввода features changes (для CHANGELOG.md)
      features:
        type: text
        description: changelog features
        default: ''

      # Input для ввода bugfixes changes (для CHANGELOG.md)
      bugfixes:
        type: text
        description: changelog bugfixes
        default: ''

      # Input для ввода breaking changes (для CHANGELOG.md)
      breaking-changes:
        type: text
        description: changelog breaking changes
        default: ''

      # Select для выбора версии
      version:
        type: choice
        description: Choose which version to release
        required: true
        options:
          - beta
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:

      # Проверка прав доступа. Только пользователь из white_list может выполнить релизную сборку.
      # Остальные могут только выпустить beta версию пакета.
      - name: Check permissions
        run: |
          white_list=("DavidGuryanov","vahrammer","sashabull66")

          if [[ "${white_list[@]}" =~ "${ACTOR}" ]]
            then echo "Доступ разрешен."
          elif [[ "${SELECTED_VERSION}" == "beta" ]]
            then echo "Доступ разрешен только для публикации beta версии пакета."
          else
              echo "Вы не можете выполнить выпуск $SELECTED_VERSION версии пакета. Доступ запрещен!"
              exit 1
          fi
        env:
          SELECTED_VERSION: ${{ github.event.inputs.version }}
          ACTOR: ${{ github.actor }}

      # Переключение на выбранную при запуске action ветку и скачивание файлов в окружение.
      - name: Checkout
        uses: actions/checkout@v3

      # Установка учётных данных bot как gitUser в текущем окружении (для release commit).
      # Извлечение имени текущей ветки.
      # Извлечение sha последнего commit из выбранной ветки (нужно для построения версии beta).
      - name: Git config
        run: |
          git config user.name ${{ secrets.BOT_USERNAME }}
          git config user.email ${{ secrets.BOT_EMAIL }}
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        id: branch

      # Установка зависимостей.
      - name: Install dependencies
        run: yarn install

      # Сборка приложения в /.publish.
      - name: Build app
        run: yarn build

      # Установка npm токена для возможности публикации.
      - name: Set npm token
        uses: filipstefansson/set-npm-token-action@v1
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}

      # Публикация выбранной версии в npm.
      - name: Publish ${{ github.event.inputs.version }} version
        run: |
          export TAG="latest"
          export VERSION="$SELECTED_VERSION"

          if [[ $SELECTED_VERSION == "beta" ]]
            then
              CURRENT_VERSION=$(grep -o '"version": "[^"]*' package.json | awk -F'"' '{print $4}')
              export TAG="beta"
              export VERSION="$CURRENT_VERSION-beta-${{ steps.branch.outputs.sha_short }}"
          fi

          yarn release

          if [[ $SELECTED_VERSION == "beta" ]]
            then
              echo "### Выпущена новая версия библиотеки: $VERSION" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
          SELECTED_VERSION: ${{ github.event.inputs.version }}

      # Заполнение файла changelog и выполнение release commit && push в релизную ветку.
      - name: Push changes to ${{ steps.branch.outputs.branch}} branch about release
        if: github.event.inputs.version != 'beta'
        run: |
          export VERSION=$(grep -o '"version": "[^"]*' package.json | awk -F'"' '{print $4}')
          export MESSAGE="Релиз версии $VERSION"
          export BRANCH="release-$VERSION"

          yarn changelog

          git checkout -b "$BRANCH"
          git add package.json CHANGELOG.md
          git commit -m "$MESSAGE"
          git push --set-upstream origin "$BRANCH"
        env:
          LAST_COMMIT_URL: https://github.com/${{ github.repository }}/commit/${{ steps.branch.outputs.sha_short }}
          SHA_SHORT: ${{ steps.branch.outputs.sha_short }}
          SEMANTIC_VERSION: ${{ github.event.inputs.version }}
          FEATURES: ${{ github.event.inputs.features }}
          BUGFIXES: ${{ github.event.inputs.bugfixes }}
          BREAKING_CHANGES: ${{ github.event.inputs.breaking-changes }}
          BOT_TOKEN: ${{ secrets.BOT_AUTH_TOKEN }}
          REPOSITORY: ${{ github.repository }}
